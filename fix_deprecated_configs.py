#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para corrigir configura√ß√µes depreciadas no FreqTrade
Remove se√ß√µes 'protections' e corrige notification_settings
"""
import json
import os
from pathlib import Path

def fix_deprecated_config(config_path):
    """Corrige configura√ß√µes depreciadas em um arquivo espec√≠fico"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        changes_made = False
        
        # Remover se√ß√£o 'protections' se existir
        if 'protections' in config:
            del config['protections']
            print(f"‚úÖ Removido 'protections' de {config_path}")
            changes_made = True
        
        # Corrigir notification_settings se existir
        if 'telegram' in config and 'notification_settings' in config['telegram']:
            notifications = config['telegram']['notification_settings']
            
            # Mapear configura√ß√µes antigas para novas
            mappings = {
                'buy': 'entry',
                'sell': 'exit',
                'buy_cancel': 'entry_cancel',
                'sell_cancel': 'exit_cancel'
            }
            
            for old_key, new_key in mappings.items():
                if old_key in notifications:
                    notifications[new_key] = notifications[old_key]
                    del notifications[old_key]
                    print(f"‚úÖ Corrigido {old_key} -> {new_key} em {config_path}")
                    changes_made = True
        
        # Salvar apenas se houve mudan√ßas
        if changes_made:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            return True
        else:
            print(f"‚ÑπÔ∏è Nenhuma corre√ß√£o necess√°ria em {config_path}")
            return True
        
    except Exception as e:
        print(f"‚ùå Erro ao corrigir {config_path}: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß CORRIGINDO CONFIGURA√á√ïES DEPRECIADAS")
    print("=" * 50)
    
    # Lista de arquivos de configura√ß√£o
    config_files = [
        'user_data/configs/stratA.json',
        'user_data/configs/stratB.json',
        'user_data/configs/waveHyperNW.json',
        'user_data/configs/mlStrategy.json',
        'user_data/configs/mlStrategySimple.json',
        'user_data/configs/waveHyperNWEnhanced.json',
        'user_data/configs/multiTimeframe.json',
        'user_data/configs/adaptiveMomentum.json',
        'user_data/configs/hybridAdvanced.json',
        'user_data/configs/intelligentScalping.json',
        'user_data/configs/volatilityAdaptive.json'
    ]
    
    fixed_count = 0
    total_count = 0
    
    for config_file in config_files:
        if os.path.exists(config_file):
            total_count += 1
            if fix_deprecated_config(config_file):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è Arquivo n√£o encontrado: {config_file}")
    
    print("\n" + "=" * 50)
    print(f"üìä RESULTADO: {fixed_count}/{total_count} arquivos processados")
    
    if fixed_count == total_count:
        print("‚úÖ Todas as configura√ß√µes foram corrigidas!")
        print("\nüîÑ Reiniciando containers...")
        return True
    else:
        print("‚ö†Ô∏è Algumas configura√ß√µes podem ter problemas")
        return False

if __name__ == "__main__":
    main()