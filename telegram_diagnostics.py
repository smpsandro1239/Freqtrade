#!/usr/bin/env python3
"""
Diagn√≥stico do Telegram Commander
Verifica configura√ß√£o e identifica problemas
"""
import os
import sys
import json
import subprocess
import docker
from pathlib import Path

def check_environment():
    """Verificar vari√°veis de ambiente"""
    print("üîç VERIFICANDO CONFIGURA√á√ÉO DO AMBIENTE")
    print("-" * 50)
    
    required_vars = ['TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
    issues = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # Mascarar token para seguran√ßa
            if var == 'TELEGRAM_TOKEN':
                display_value = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
            else:
                display_value = value
            print(f"   ‚úÖ {var}: {display_value}")
        else:
            print(f"   ‚ùå {var}: N√ÉO CONFIGURADO")
            issues.append(f"{var} n√£o est√° configurado")
    
    return issues

def check_files():
    """Verificar arquivos necess√°rios"""
    print("\nüîç VERIFICANDO ARQUIVOS NECESS√ÅRIOS")
    print("-" * 50)
    
    required_files = [
        'scripts/telegram_commander.py',
        'scripts/strategy_controller.py',
        'scripts/freqtrade_stats.py',
        'docker-compose.yml',
        '.env'
    ]
    
    issues = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"   ‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"   ‚ùå {file_path}: ARQUIVO N√ÉO ENCONTRADO")
            issues.append(f"Arquivo {file_path} n√£o encontrado")
    
    return issues

def check_docker():
    """Verificar Docker e containers"""
    print("\nüîç VERIFICANDO DOCKER E CONTAINERS")
    print("-" * 50)
    
    issues = []
    
    try:
        # Verificar se Docker est√° rodando
        result = subprocess.run(['docker', 'version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ Docker est√° rodando")
        else:
            print("   ‚ùå Docker n√£o est√° rodando")
            issues.append("Docker n√£o est√° rodando")
            return issues
    except FileNotFoundError:
        print("   ‚ùå Docker n√£o est√° instalado")
        issues.append("Docker n√£o est√° instalado")
        return issues
    
    # Verificar containers das estrat√©gias
    strategies = ['ft-stratA', 'ft-stratB', 'ft-waveHyperNW', 'telegram_commander']
    
    for container in strategies:
        try:
            result = subprocess.run(['docker', 'ps', '-a', '--filter', f'name={container}', '--format', 'table {{.Names}}\t{{.Status}}'], 
                                  capture_output=True, text=True)
            if container in result.stdout:
                status_line = [line for line in result.stdout.split('\n') if container in line]
                if status_line:
                    status = status_line[0].split('\t')[1] if '\t' in status_line[0] else 'unknown'
                    if 'Up' in status:
                        print(f"   üü¢ {container}: {status}")
                    else:
                        print(f"   üî¥ {container}: {status}")
                        if container == 'telegram_commander':
                            issues.append(f"Container {container} n√£o est√° rodando")
            else:
                print(f"   ‚ùå {container}: N√ÉO ENCONTRADO")
                issues.append(f"Container {container} n√£o encontrado")
        except Exception as e:
            print(f"   ‚ùå {container}: ERRO - {e}")
            issues.append(f"Erro ao verificar container {container}: {e}")
    
    return issues

def check_python_dependencies():
    """Verificar depend√™ncias Python"""
    print("\nüîç VERIFICANDO DEPEND√äNCIAS PYTHON")
    print("-" * 50)
    
    required_packages = [
        'telegram',
        'docker',
        'asyncio'
    ]
    
    issues = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}: INSTALADO")
        except ImportError:
            print(f"   ‚ùå {package}: N√ÉO INSTALADO")
            issues.append(f"Pacote Python {package} n√£o est√° instalado")
    
    return issues

def check_strategy_configs():
    """Verificar configura√ß√µes das estrat√©gias"""
    print("\nüîç VERIFICANDO CONFIGURA√á√ïES DAS ESTRAT√âGIAS")
    print("-" * 50)
    
    config_files = [
        'user_data/configs/stratA.json',
        'user_data/configs/stratB.json',
        'user_data/configs/waveHyperNW.json'
    ]
    
    issues = []
    
    for config_file in config_files:
        if Path(config_file).exists():
            try:
                with open(config_file, 'r') as f:
                    config = json.load(f)
                
                # Verificar campos essenciais
                essential_fields = ['dry_run', 'stake_amount', 'max_open_trades']
                missing_fields = [field for field in essential_fields if field not in config]
                
                if missing_fields:
                    print(f"   ‚ö†Ô∏è {config_file}: Campos faltando: {missing_fields}")
                    issues.append(f"Configura√ß√£o {config_file} est√° incompleta")
                else:
                    dry_run = "DRY" if config.get('dry_run', True) else "LIVE"
                    print(f"   ‚úÖ {config_file}: {dry_run}, Stake: {config.get('stake_amount', 0)}")
                
            except json.JSONDecodeError as e:
                print(f"   ‚ùå {config_file}: JSON INV√ÅLIDO - {e}")
                issues.append(f"Configura√ß√£o {config_file} tem JSON inv√°lido")
            except Exception as e:
                print(f"   ‚ùå {config_file}: ERRO - {e}")
                issues.append(f"Erro ao ler configura√ß√£o {config_file}: {e}")
        else:
            print(f"   ‚ùå {config_file}: N√ÉO ENCONTRADO")
            issues.append(f"Arquivo de configura√ß√£o {config_file} n√£o encontrado")
    
    return issues

def check_telegram_connectivity():
    """Verificar conectividade com Telegram"""
    print("\nüîç VERIFICANDO CONECTIVIDADE COM TELEGRAM")
    print("-" * 50)
    
    token = os.getenv('TELEGRAM_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    issues = []
    
    if not token or not chat_id:
        print("   ‚ùå Token ou Chat ID n√£o configurados")
        issues.append("Configura√ß√£o do Telegram incompleta")
        return issues
    
    try:
        import requests
        
        # Testar API do Telegram
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                print(f"   ‚úÖ Bot conectado: @{bot_info.get('username', 'unknown')}")
                
                # Testar envio de mensagem
                send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                test_data = {
                    'chat_id': chat_id,
                    'text': 'üß™ Teste de conectividade - Bot funcionando!'
                }
                
                send_response = requests.post(send_url, json=test_data, timeout=10)
                if send_response.status_code == 200:
                    print("   ‚úÖ Mensagem de teste enviada com sucesso")
                else:
                    print(f"   ‚ùå Erro ao enviar mensagem: {send_response.status_code}")
                    issues.append("N√£o foi poss√≠vel enviar mensagem de teste")
            else:
                print(f"   ‚ùå Resposta da API inv√°lida: {data}")
                issues.append("Token do Telegram inv√°lido")
        else:
            print(f"   ‚ùå Erro na API: {response.status_code}")
            issues.append(f"Erro na API do Telegram: {response.status_code}")
    
    except ImportError:
        print("   ‚ö†Ô∏è Biblioteca 'requests' n√£o dispon√≠vel - pulando teste de conectividade")
    except Exception as e:
        print(f"   ‚ùå Erro na conectividade: {e}")
        issues.append(f"Erro de conectividade: {e}")
    
    return issues

def generate_diagnostic_report(all_issues):
    """Gerar relat√≥rio de diagn√≥stico"""
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO DE DIAGN√ìSTICO")
    print("=" * 60)
    
    if not all_issues:
        print("\nüéâ PARAB√âNS! Nenhum problema encontrado!")
        print("‚úÖ Todas as verifica√ß√µes passaram com sucesso")
        print("üöÄ O Telegram Commander deve estar funcionando corretamente")
    else:
        print(f"\n‚ö†Ô∏è PROBLEMAS ENCONTRADOS: {len(all_issues)}")
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        
        for i, issue in enumerate(all_issues, 1):
            print(f"   {i}. {issue}")
        
        print("\nüí° SUGEST√ïES DE CORRE√á√ÉO:")
        
        # Sugest√µes espec√≠ficas baseadas nos problemas
        if any("TELEGRAM_TOKEN" in issue for issue in all_issues):
            print("   ‚Ä¢ Configure TELEGRAM_TOKEN no arquivo .env")
            print("   ‚Ä¢ Obtenha o token do @BotFather no Telegram")
        
        if any("TELEGRAM_CHAT_ID" in issue for issue in all_issues):
            print("   ‚Ä¢ Configure TELEGRAM_CHAT_ID no arquivo .env")
            print("   ‚Ä¢ Use @userinfobot para descobrir seu Chat ID")
        
        if any("Docker" in issue for issue in all_issues):
            print("   ‚Ä¢ Instale e inicie o Docker Desktop")
            print("   ‚Ä¢ Execute: docker compose up -d")
        
        if any("Container" in issue for issue in all_issues):
            print("   ‚Ä¢ Execute: docker compose up -d telegram_commander")
            print("   ‚Ä¢ Verifique logs: docker compose logs telegram_commander")
        
        if any("Python" in issue for issue in all_issues):
            print("   ‚Ä¢ Instale depend√™ncias: pip install python-telegram-bot docker")
        
        if any("configura√ß√£o" in issue.lower() for issue in all_issues):
            print("   ‚Ä¢ Verifique arquivos de configura√ß√£o JSON")
            print("   ‚Ä¢ Execute: python scripts/strategy_controller.py --validate")
    
    print(f"\nüìÖ Diagn√≥stico executado em: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def main():
    """Fun√ß√£o principal"""
    print("üîß DIAGN√ìSTICO DO TELEGRAM COMMANDER")
    print("=" * 60)
    
    all_issues = []
    
    # Executar todas as verifica√ß√µes
    all_issues.extend(check_environment())
    all_issues.extend(check_files())
    all_issues.extend(check_docker())
    all_issues.extend(check_python_dependencies())
    all_issues.extend(check_strategy_configs())
    all_issues.extend(check_telegram_connectivity())
    
    # Gerar relat√≥rio final
    generate_diagnostic_report(all_issues)
    
    # C√≥digo de sa√≠da
    return len(all_issues)

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)